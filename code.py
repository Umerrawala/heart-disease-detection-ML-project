# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vLaCxMwV7iNzCHcTntjHe9qHikt__kgR

This program classifies wether a person has heart disease or not.
"""

# Import libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# loading csv file
from google.colab import files
uploaded =files.upload()

heart_data=pd.read_csv('heart_disease_data.csv')

# print first five rows of csv file
heart_data.head()

# print last five rows of data
heart_data.tail()

# number of rows and columns in data set
heart_data.shape

# getting some info about data set
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking distribution of Target variable
heart_data['target'].value_counts()

X=heart_data.drop(columns='target', axis=1)
Y=heart_data['target']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#  Model training
# Logistic regression

model=LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

# Model Evaluation

# Accuracy score

# accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data: ', training_data_accuracy)

# accuracy on training data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data: ', test_data_accuracy)

# Building predictive system

input_data=(41,0,1,130,204,0,0,172,0,1.4,2,0,2)

# change input_data to a numpy array
input_data_as_np_array = np.asarray(input_data)

# reshape numpy array as we are pridicting for only on instance
input_data_reshaped=input_data_as_np_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
# print(prediction)

if (prediction[0]==0):
  print("Does not has heart desease")
else:
  print("Has heart disease")

